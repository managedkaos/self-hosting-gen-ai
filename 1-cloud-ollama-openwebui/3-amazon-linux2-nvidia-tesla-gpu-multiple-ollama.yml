Description: Two EC2 servers with Nvidia Tesla GPU running Ollama; One EC2 server running Open Web UI managing both Ollama servers.  An EFS filesystem is attached to the Open Web UI server to persist the Open Web UI volume.


Parameters:
  UiInstanceType:
    Type: String
    Description: The size and type to use for the EC2 instance running Open-WebUI.
    Default: m7a.large
    AllowedValues:  
      - m7a.large
      - m7a.xlarge
      - m7a.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type.


  OllamaInstanceType:
    Type: String
    Description: The size and type to use for the EC2 instances running Ollama. Must be NVIDIA TESLA GPU instance type.
    Default: g4dn.xlarge
    AllowedValues:
      - g4dn.xlarge
      - g4dn.2xlarge
      - g4dn.4xlarge
      - g4dn.8xlarge
      - g4dn.16xlarge
    ConstraintDescription: Must be a valid EC2 instance type.


  VpcID:
    Description: The VPC to use for this deployment.
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: Must be a valid VPC.


  Subnet0:
    Description: A subnet; must belong to the selected VPC.
    Type: AWS::EC2::Subnet::Id


  Subnet1:
    Description: A subnet; must belong to the selected VPC.
    Type: AWS::EC2::Subnet::Id


  Subnet2:
    Description: A subnet; must belong to the selected VPC.
    Type: AWS::EC2::Subnet::Id

  
  Subnet3:
    Description: A subnet; must belong to the selected VPC.
    Type: AWS::EC2::Subnet::Id


Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM


  Profile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref Role]


  UiSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow TCP traffic on port 8080
      VpcId: !Ref VpcID


  OllamaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow TCP traffic on port 11434
      VpcId: !Ref VpcID


  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic within the VPC
      VpcId: !Ref VpcID


  FileSystemSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow TCP traffic on port 2049
      VpcId: !Ref VpcID


  UiSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref UiSecurityGroup
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      CidrIp: 0.0.0.0/0


  OllammaSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref OllamaSecurityGroup
      IpProtocol: tcp
      FromPort: 11434
      ToPort: 11434
      SourceSecurityGroupId: !Ref EC2SecurityGroup


  FileSystemSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref FileSystemSecurityGroup
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !Ref EC2SecurityGroup


  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose
      ThroughputMode: bursting


  MountTarget0:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref Subnet0
      SecurityGroups:
        - !Ref FileSystemSecurityGroup


  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref Subnet1
      SecurityGroups:
        - !Ref FileSystemSecurityGroup


  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref Subnet2
      SecurityGroups:
        - !Ref FileSystemSecurityGroup


  MountTarget3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref Subnet3
      SecurityGroups:
        - !Ref FileSystemSecurityGroup


  OllamaServer0:
    Type: AWS::EC2::Instance

    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M

    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          application_installation:
            - install_cfn
        install_cfn:
          files:
            /etc/systemd/system/ollama.service.d/ollama-host.conf:
              content: |
                [Service]
                Environment="OLLAMA_HOST=0.0.0.0"
              mode: '000400'
              owner: root
              group: root

            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root

            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Server.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v
                      --stack ${AWS::StackName}
                      --resource Server
                      --configsets application_installation
                      --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root

          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

    Properties:
      InstanceType: !Ref OllamaInstanceType

      ImageId: "{{resolve:ssm:/aws/service/marketplace/prod-sv2ifwvpp52d4/2.0.20240620.0}}"

      IamInstanceProfile: !Ref Profile
      
      SecurityGroupIds:
        - !Ref OllamaSecurityGroup

      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ollama-0

      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            VolumeSize: 500
            DeleteOnTermination: true
            Encrypted: false

      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log) 2>&1

            yum update -y aws-cfn-bootstrap

            /opt/aws/bin/cfn-init -v \
              --stack ${AWS::StackName} \
              --region ${AWS::Region} \
              --resource OllamaServer0 \
              --configsets application_installation

            curl -fsSL https://ollama.com/install.sh | sh

            systemctl daemon-reload
            systemctl start ollama
            systemctl enable ollama

            /opt/aws/bin/cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --region ${AWS::Region} \
              --resource OllamaServer0

            ollama pull llama3.1


  OllamaServer1:
    Type: AWS::EC2::Instance

    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M

    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          application_installation:
            - install_cfn
        install_cfn:
          files:
            /etc/systemd/system/ollama.service.d/ollama-host.conf:
              content: |
                [Service]
                Environment="OLLAMA_HOST=0.0.0.0"
              mode: '000400'
              owner: root
              group: root

            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root

            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Server.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v
                      --stack ${AWS::StackName}
                      --resource Server
                      --configsets application_installation
                      --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root

          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

    Properties:
      InstanceType: !Ref OllamaInstanceType

      ImageId: "{{resolve:ssm:/aws/service/marketplace/prod-sv2ifwvpp52d4/2.0.20240620.0}}"

      IamInstanceProfile: !Ref Profile
      
      SecurityGroupIds:
        - !Ref OllamaSecurityGroup

      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ollama-1

      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            VolumeSize: 500
            DeleteOnTermination: true
            Encrypted: false

      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log) 2>&1

            yum update -y aws-cfn-bootstrap

            /opt/aws/bin/cfn-init -v \
              --stack ${AWS::StackName} \
              --region ${AWS::Region} \
              --resource OllamaServer1 \
              --configsets application_installation

            curl -fsSL https://ollama.com/install.sh | sh

            systemctl daemon-reload
            systemctl start ollama
            systemctl enable ollama

            /opt/aws/bin/cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --region ${AWS::Region} \
              --resource OllamaServer1

            ollama pull llama3.1


  UiServer:
    Type: AWS::EC2::Instance

    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M

    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          application_installation:
            - install_cfn
            - install_apps
        install_cfn:
          files:
            /etc/systemd/system/open-webui.service:
              content: !Sub |
                [Unit]
                Description=Open Web UI
                [Service]
                ExecStart=/usr/bin/docker start open-webui
                Environment="OLLAMA_BASE_URLS=http://${OllamaServer0.PrivateDnsName}:11434;http://${OllamaServer1.PrivateDnsName}:11434"
                Restart=on-failure
                [Install]
                WantedBy=multi-user.target
              mode: '000400'
              owner: root
              group: root

            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root

            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Server.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v
                      --stack ${AWS::StackName}
                      --resource Server
                      --configsets application_installation
                      --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root

          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

        install_apps:
          packages:
            yum:
              docker: []
              amazon-efs-utils: []
          services:
            sysvinit:
              docker:
                enabled: 'true'
                ensureRunning: 'true'

    Properties:
      InstanceType: !Ref UiInstanceType
      
      ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64}}"

      IamInstanceProfile: !Ref Profile
      
      SecurityGroupIds:
        - !Ref UiSecurityGroup
        - !Ref EC2SecurityGroup
      
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ui

      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            VolumeSize: 500
            DeleteOnTermination: true
            Encrypted: false

      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log) 2>&1

            yum update -y aws-cfn-bootstrap

            /opt/aws/bin/cfn-init -v \
              --stack ${AWS::StackName} \
              --region ${AWS::Region} \
              --resource UiServer \
              --configsets application_installation

            docker volume create --driver local \
              --opt type=nfs \
              --opt o=addr=${FileSystem}.efs.${AWS::Region}.amazonaws.com,rw,nfsvers=4 \
              --opt device=:/ \
              open-webui

            docker run --detach \
              --network="host" \
              --mount source=open-webui,target=/app/backend/data \
              --env OLLAMA_BASE_URLS="http://${OllamaServer0.PrivateDnsName}:11434;http://${OllamaServer1.PrivateDnsName}:11434" \
              --restart always \
              --name open-webui \
              ghcr.io/open-webui/open-webui:main

            systemctl daemon-reload
            systemctl enable open-webui

            mkdir /mnt/open-webui
            
            echo -e "$(date)\n\nIf you are seeing this message, you are viewing the local disk, not EFS.\n\n" > \
              /mnt/open-webui/this-is-the-local-disk-not-the-efs-disk.txt
            
            cp -v /etc/fstab "/root/fstab.$(date +%F-%s).txt"
            
            echo "${FileSystem} /mnt/open-webui efs _netdev,tls 0 0" >> /etc/fstab

            mount -a

            /opt/aws/bin/cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --region ${AWS::Region} \
              --resource UiServer


  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref UiServer


Outputs:
  ApplicationUrl:
    Value: !Sub 'http://${UiServer.PublicDnsName}:8080/'
    Description: Follow this URL to accesss the Open WebUI application


  UiServerUrl:
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2/home?region=${AWS::Region}#ConnectToInstance:instanceId=${UiServer}"
    Description: Follow this URL to open a terminal on the server where Open WebUI is running


  OllamaServer0Url:
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2/home?region=${AWS::Region}#ConnectToInstance:instanceId=${OllamaServer0}"
    Description: Follow this URL to open a terminal on the server where Ollama is running


  OllamaServer1Url:
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2/home?region=${AWS::Region}#ConnectToInstance:instanceId=${OllamaServer1}"
    Description: Follow this URL to open a terminal on the server where Ollama is running
